{"version":3,"file":"static/js/943.b4d57943.chunk.js","mappings":"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","sources":["Components/Helpers/Title.jsx","Components/Views/GetInTouch/GetInTouch.jsx"],"sourcesContent":["import { useEffect } from \"react\";\n\nexport default function Title({ title }) {\n    const defaultTitle = 'Michael Lavigna';\n    useEffect(() => {\n        document.title = `${defaultTitle} - ${title}`;\n    }, [title]);\n}","import { useEffect, useState } from \"react\";\nimport Title from \"../../Helpers/Title\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport { StyledAccountsContainer, StyledContactButton, StyledContactDiv, StyledGITH1, StyledGITSection, StyledInfoContainer } from \"../StyledComponents\";\nimport { Slide, Snackbar, TextField } from \"@mui/material\";\nimport Alert from '@mui/material/Alert';\nimport emailjs from '@emailjs/browser';\nimport Loader from \"../../Loader/Loader\";\n\nexport default function GetInTouch() {\n    const recaptchaTheme = localStorage.getItem('lightMode') === 'l' ? 'light' : 'dark';\n    const [formValues, setFormValues] = useState({\n        name: '',\n        surname: '',\n        email: '',\n        message: ''\n    });\n    const [isSending, setIsSending] = useState(false);\n    const [recaptchaToken, setRecaptchaToken] = useState(null);\n    const [alertShow, setAlertShow] = useState(false);\n    const [alertType, setAlertType] = useState();\n    const [alertMessage, setAlertMessage] = useState();\n    const [isAlertOpen, setIsAlertOpen] = useState(false);\n    const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n\n    useEffect(() => {\n        const handleResize = () => {\n            setIsMobile(window.innerWidth < 768);\n        };\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    const SlideTransition = (props) => {\n        return <Slide {...props} direction=\"left\" />;\n    }\n    const showAlert = (type, message) => {\n        setIsAlertOpen(true);\n        setAlertType(type);\n        setAlertMessage(message);\n        setAlertShow(true);\n    };\n    const handleAlertClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setIsAlertOpen(false);\n        setAlertShow(false);\n    };\n\n    const handleChange = (event, maxLength) => {\n        const { id, value } = event.target;\n        if (value.length <= maxLength) {\n            setFormValues((prevValues) => ({\n                ...prevValues,\n                [id]: value\n            }));\n        }\n    };\n\n    const handleFormSubmit = async () => {\n        setIsSending(true);\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n        if (!formValues.name || !formValues.surname || !formValues.email || !formValues.message) {\n            setIsSending(false);\n            showAlert(\"error\", \"Fill in all the fields below to continue!\");\n            return;\n        }\n        if (!emailRegex.test(formValues.email)) {\n            setIsSending(false);\n            showAlert(\"error\", \"Please enter a valid email address\");\n            return;\n        }\n        const res = await handleMailSend(formValues.name, formValues.surname, formValues.email, formValues.message);\n        if (res?.status === 200) {\n            setFormValues({\n                name: '',\n                surname: '',\n                email: '',\n                message: ''\n            })\n\n            showAlert(\"success\", \"Everything was successfully sent\");\n        } else {\n            showAlert(\"error\", \"An error occurred while sending the message. Please try again later.\");\n        }\n        setIsSending(false);\n    };\n\n    const handleMailSend = async (name, surname, email, message) => {\n        try {\n            const res = await emailjs.send(process.env.REACT_APP_EMAIL_SERVICE, process.env.REACT_APP_EMAIL_TEMPLATE,\n                {\n                    name: name,\n                    surname: surname,\n                    email: email,\n                    message: message,\n                }\n                , process.env.REACT_APP_EMAIL_SERVICE_KEY);\n            return res;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    };\n    return (\n        <>\n            <Title title=\"Get In Touch\" />\n            <StyledGITH1>Get In Touch</StyledGITH1>\n            <StyledGITSection>\n                <div>\n                    <h2>Don't be shy!</h2>\n                    <p>I'm always available to discuss new projects, creative ideas or opportunities to be a part of your vision!</p>\n                    <small>{recaptchaToken ? \"Great, here's my contacts!\" : \"To un-hide my contacts, please complete the captcha\"}</small>\n                    <ReCAPTCHA\n                        sitekey={process.env.REACT_APP_RECAP_KEY}\n                        onChange={(token) => setRecaptchaToken(token)}\n                        theme={recaptchaTheme}\n                        style={{ display: recaptchaToken ? 'none' : 'block' }}\n                    />\n                    {recaptchaToken &&\n                        <StyledAccountsContainer>\n                            <StyledInfoContainer>\n                                {isMobile ? <h3>+39 366 4054006</h3> : <h2>+39 366 4054006</h2>}\n                                <svg width=\"48\" viewBox=\"0 0 24 24\" data-name=\"Line Color\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21 15v3.93a2 2 0 0 1-2.29 2A18 18 0 0 1 3.14 5.29 2 2 0 0 1 5.13 3H9a1 1 0 0 1 1 .89 10.7 10.7 0 0 0 1 3.78 1 1 0 0 1-.42 1.26l-.86.49a1 1 0 0 0-.33 1.46 14.1 14.1 0 0 0 3.69 3.69 1 1 0 0 0 1.46-.33l.49-.86a1 1 0 0 1 1.3-.38 10.7 10.7 0 0 0 3.78 1 1 1 0 0 1 .89 1\" style={{ fill: 'none', stroke: '#9b27ff', strokeLinecap: 'round', strokeLinejoin: 'round', strokeWidth: '2' }} /></svg>\n                            </StyledInfoContainer>\n                            <StyledInfoContainer>\n                                {isMobile ? <h3>michael.lavigna@hotmail.it</h3> : <h2>michael.lavigna@hotmail.it</h2>}\n                                <svg width=\"48\" viewBox=\"0 0 24 24\"><path fill=\"#9b27ff\" d=\"M19 7H5a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2m-9.684 7.316 1.602 1.4c.305.266.691.398 1.082.398s.777-.133 1.082-.398l1.602-1.4-.037.037 3.646 3.646H5.707l3.646-3.646zM5 17.293V10.54l3.602 3.151zm10.398-3.602L19 10.54v6.75zM19 9v.21l-6.576 5.754a.68.68 0 0 1-.848 0L5 9.21V9z\" /></svg>\n                            </StyledInfoContainer>\n                        </StyledAccountsContainer>}\n                </div>\n                <StyledContactDiv>\n                    <h2 style={{ textAlign: 'center' }}>Fill in the form to send me an email!</h2>\n                    <TextField classes={{ root: 'mail-field' }} id=\"name\" label=\"Name\" variant=\"filled\" helperText=\"Please enter your name\" value={formValues.name} onChange={(event) => handleChange(event, 100)} />\n                    <TextField classes={{ root: 'mail-field' }} id=\"surname\" label=\"Surname\" variant=\"filled\" helperText=\"Please enter your surname\" value={formValues.surname} onChange={(event) => handleChange(event, 100)} />\n                    <TextField classes={{ root: 'mail-field' }} id=\"email\" label=\"Email\" variant=\"filled\" helperText=\"Please enter your email\" value={formValues.email} onChange={(event) => handleChange(event, 150)} />\n                    <TextField classes={{ root: 'mail-field' }} id=\"message\" label=\"Enter your message...\" variant=\"filled\" helperText=\"Please enter your message\" multiline maxRows={6} value={formValues.message} onChange={(event) => handleChange(event, 255)} />\n                    <StyledContactButton style={{ margin: '1vh auto' }} onClick={handleFormSubmit}>Send</StyledContactButton>\n                </StyledContactDiv>\n                {alertShow && (\n                    <Snackbar style={{ zIndex: '9999', marginTop: '10vh' }} open={isAlertOpen} autoHideDuration={3000} onClose={handleAlertClose} TransitionComponent={SlideTransition} anchorOrigin={{ vertical: 'top', horizontal: 'right' }} key={{ vertical: 'top', horizontal: 'right' }}>\n                        <Alert\n                            style={{ background: 'rgb(255 255 255 / 90%)' }}\n                            onClose={handleAlertClose}\n                            severity={alertType}\n                            variant=\"outlined\"\n                            sx={{ width: '100%' }}\n                        >\n                            {alertMessage}\n                        </Alert>\n                    </Snackbar>)}\n            </StyledGITSection>\n            {isSending && <Loader />}\n        </>\n    );\n}"],"names":["Title","_ref","title","useEffect","document","concat","GetInTouch","recaptchaTheme","localStorage","getItem","formValues","setFormValues","useState","name","surname","email","message","isSending","setIsSending","recaptchaToken","setRecaptchaToken","alertShow","setAlertShow","alertType","setAlertType","alertMessage","setAlertMessage","isAlertOpen","setIsAlertOpen","isMobile","setIsMobile","window","innerWidth","handleResize","addEventListener","removeEventListener","showAlert","type","handleAlertClose","event","reason","handleChange","maxLength","id","value","target","length","prevValues","handleMailSend","async","emailjs","process","error","console","_jsxs","_Fragment","children","_jsx","StyledGITH1","StyledGITSection","ReCAPTCHA","sitekey","onChange","token","theme","style","display","StyledAccountsContainer","StyledInfoContainer","width","viewBox","xmlns","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","StyledContactDiv","textAlign","TextField","classes","root","label","variant","helperText","multiline","maxRows","StyledContactButton","margin","onClick","test","res","status","Snackbar","zIndex","marginTop","open","autoHideDuration","onClose","TransitionComponent","props","Slide","direction","anchorOrigin","vertical","horizontal","Alert","background","severity","sx","Loader"],"sourceRoot":""}